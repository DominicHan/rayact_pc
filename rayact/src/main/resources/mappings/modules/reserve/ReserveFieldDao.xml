<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bra.modules.reserve.dao.ReserveFieldDao">
    
	<sql id="reserveFieldColumns">
		a.id AS "id",
		a.name AS "name",
		a.available AS "available",
		a.original_price AS "originalPrice",
		a.actual_price AS "actualPrice",
		a.project_id AS "reserveProject.id",
		a.venue_id AS "reserveVenue.id",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag",
		a.is_time_interval AS "isTimeInterval",
		p.name AS "reserveProject.name",
		v.name AS "reserveVenue.name"
	</sql>
	
	<sql id="reserveFieldJoins">
		LEFT JOIN reserve_project p ON p.id = a.project_id
		LEFT JOIN reserve_venue v ON v.id = a.venue_id
	</sql>
    
	<select id="get" resultType="ReserveField">
		SELECT 
			<include refid="reserveFieldColumns"/>
		FROM reserve_field a
		<include refid="reserveFieldJoins"/>
		WHERE a.id = #{id}
		and a.available != '0'
	</select>
	
	<select id="findList" resultType="ReserveField">
		SELECT 
			<include refid="reserveFieldColumns"/>
		FROM reserve_field a
		<include refid="reserveFieldJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="tenantId != null and tenantId != ''">
				and a.tenant_id = #{tenantId}
			</if>
			<if test="name != null and name != ''">
				AND a.name LIKE 
					<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{name}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{name},'%')</if>
			</if>
			<if test="reserveVenue != null">
				<if test="reserveVenue.id !=null and reserveVenue.id != ''">
					AND venue_id = #{reserveVenue.id}
				</if>
			</if>
			<if test="reserveProject != null">
				<if test="reserveProject.id !=null and reserveProject.id != ''">
					AND project_id = #{reserveProject.id}
				</if>
			</if>
			and a.available != '0'
			${sqlMap.dsf}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy},a.venue_id DESC ,a.project_id DESC
			</when>
			<otherwise>
				ORDER BY a.name asc
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="ReserveField">
		SELECT 
			<include refid="reserveFieldColumns"/>
		FROM reserve_field a
		<include refid="reserveFieldJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
			and a.available != '0'
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO reserve_field(
			id,
			name,
			available,
			project_id,
			venue_id,
			original_price,
			actual_price,
			is_time_interval,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag,
			tenant_id
		) VALUES (
			#{id},
			#{name},
			#{available},
			#{reserveProject.id},
			#{reserveVenue.id},
			#{originalPrice},
			#{actualPrice},
			#{isTimeInterval},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag},
			#{tenantId}
		)
	</insert>
	
	<update id="update">
		UPDATE reserve_field SET 	
			name = #{name},
			available = #{available},
			original_price = #{originalPrice},
			actual_price = #{actualPrice},
			project_id = #{reserveProject.id},
			venue_id = #{reserveVenue.id},
			is_time_interval=#{isTimeInterval},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks},
			tenant_id = #{tenantId}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE reserve_field SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

	<select id="getFieldNumByProject" parameterType="ReserveField" resultType="Map">
		SELECT
		COUNT(CASE WHEN tmp.parent_field_id IS NULL THEN tmp.id END) AS num,
		tmp.project_id AS projectId,
		tmp.name AS projectName
		FROM
			(
			SELECT DISTINCT(f.id),r.parent_field_id,f.project_id,p.name
			FROM reserve_field f LEFT JOIN reserve_field_relation r ON f.id = r.parent_field_id,reserve_project p
			WHERE f.venue_id = #{reserveVenue.id} AND p.id= f.project_id
			) tmp
		GROUP BY tmp.project_id
	</select>
	
</mapper>