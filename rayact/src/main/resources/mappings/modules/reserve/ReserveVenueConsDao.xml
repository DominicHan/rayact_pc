<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bra.modules.reserve.dao.ReserveVenueConsDao">

    <sql id="reserveVenueConsDataColumns">
		a.id AS "id",
		a.member_id AS "member.id",
		a.venue_id AS "reserveVenue.id",
		v.name AS "reserveVenue.name",
		a.cons_mobile AS "consMobile",
		a.user_name AS "userName",
		a.cons_type AS "consType",
		a.reserve_type AS "reserveType",
		a.order_price AS "orderPrice",
		a.should_price AS "shouldPrice",
		a.cons_price AS "consPrice",
		a.discount_price AS "discountPrice",
		a.pay_type AS "payType",
		a.cons_date AS "consDate",
		a.checkout_id AS "checkOutUser.id",
		a.project_id AS "project.id",

		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag"
	</sql>

    <sql id="reserveVenueConsDataJoins">
		LEFT JOIN reserve_venue as v ON v.id = a.venue_id
	</sql>

    <select id="get" resultType="ReserveVenueCons">
        SELECT
        <include refid="reserveVenueConsDataColumns"/>
        FROM reserve_venue_cons as a
        <include refid="reserveVenueConsDataJoins"/>
        WHERE a.id = #{id}
    </select>

    <!--订单-->
    <select id="findListOrder" resultType="ReserveVenueCons">
        select a.id AS "id",v.name AS "reserveVenue.name",a.order_price AS "orderPrice",a.pay_type AS
        "payType",a.update_date AS "updateDate",
        a.remarks AS "remarks"
        from reserve_venue_cons a,reserve_venue v
        where a.venue_id = v.id and a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
        <if test="reserveType != null and reserveType != ''">
            and a.reserve_type = #{reserveType}
        </if>
        ${sqlMap.dsf}
        <if test="sqlMap.startDate != null and sqlMap.endDate != null">
            and (Date(a.update_date) BETWEEN DATE (#{sqlMap.startDate}) AND DATE(#{sqlMap.endDate}))
        </if>
        ORDER BY a.update_date DESC
    </select>

    <select id="findPriceGroupProject" resultType="java.util.Map">
        select sum(a.order_price )as orderPrice,d.name as projectName
        from reserve_venue_cons_item a,reserve_venue_cons b,reserve_field c,reserve_project d
        where a.cons_data_id = b.id and a.field_id =c.id and c.project_id = d.id and a.tenant_id = #{tenantId}
        and a.del_flag = '0' and a.tenant_id = #{tenantId}
        and year(a.update_date)=year(CURDATE())
        <if test="reserveType != null and reserveType != ''">
            and b.reserve_type = #{reserveType}
        </if>
        ${sqlMap.dsf}
        group by d.name
    </select>

    <select id="findPriceGroupProjectReport" resultType="java.util.Map">
        select d.name as projectName,sum(should_price) as shouldPrice,sum(b.order_price )as
        orderPrice,sum(b.discount_price) as discountPrice,count(pay_Type) as total,
        sum(case pay_Type when '1' then b.order_price else 0 end) memberPrice,
        sum(case pay_Type when '2' then b.order_price else 0 end) moneyPrice,
        sum(case pay_Type when '3' then b.order_price else 0 end) cardPrice,
        sum(case pay_Type when '4' then b.order_price else 0 end) weixinPrice,
        sum(case pay_Type when '5' then b.order_price else 0 end) zfbPrice,
        sum(case pay_Type when '6' then b.order_price else 0 end) otherPrice
        from reserve_venue_cons_item a,reserve_venue_cons b,reserve_field c,reserve_project d
        where a.cons_data_id = b.id and a.field_id =c.id and c.project_id = d.id
        and a.del_flag = '0' and a.tenant_id = #{tenantId}
        <if test="sqlMap.search != null and sqlMap.search != '' and sqlMap.search == '1' ">
            and date(a.update_date)=date(CURDATE())
        </if>
        <if test="sqlMap.search != null and sqlMap.search != '' and sqlMap.search == '2' ">
            and month(a.update_date)=month(CURDATE())
        </if>
        <if test="sqlMap.search != null and sqlMap.search != '' and sqlMap.search == '3' ">
            and year(a.update_date)=year(CURDATE())
        </if>
        <if test="sqlMap.startDate != null and sqlMap.endDate != null">
            and (Date(a.update_date) BETWEEN DATE (#{sqlMap.startDate}) AND DATE(#{sqlMap.endDate}))
        </if>
        ${sqlMap.dsf}
        group by d.name
    </select>

    <!--空场率报表-->
    <select id="findOpenRateReport" resultType="java.util.Map">
        select c.name as venue_name,f.name as field_name,p.name as project_name,
        FORMAT(sum(TIMESTAMPDIFF(MINUTE,CONCAT('2016-01-29 ',b.start_time,':00'),CONCAT('2016-01-29
        ',b.end_time,':00')))/60,1)
        as utilization_time,
        sum(23-8) as business_time
        from reserve_venue_cons a,reserve_venue_cons_item b,reserve_venue c,reserve_project p,reserve_field f
        where a.id = b.cons_data_id and a.venue_id = c.id and a.project_id = p.id and b.field_id = f.id
        and a.del_flag = '0' and a.reserve_type = '4' and a.tenant_id = #{tenantId}
        <if test="sqlMap.search != null and sqlMap.search != '' and sqlMap.search == '1' ">
            and date(a.update_date)=date(CURDATE())
        </if>
        <if test="sqlMap.search != null and sqlMap.search != '' and sqlMap.search == '2' ">
            and month(a.update_date)=month(CURDATE())
        </if>
        <if test="sqlMap.search != null and sqlMap.search != '' and sqlMap.search == '3' ">
            and year(a.update_date)=year(CURDATE())
        </if>
        <if test="sqlMap.startDate != null and sqlMap.endDate != null">
            and (Date(a.update_date) BETWEEN DATE (#{sqlMap.startDate}) AND DATE(#{sqlMap.endDate}))
        </if>
        ${sqlMap.dsf}
        group by c.name,f.name,p.name
        order by c.name,f.name,p.name
    </select>

    <select id="findOrderLog" resultType="java.util.Map">
        select a.user_name,a.venue_id,v.name,
        a.user_name,a.cons_mobile,a.cons_date,a.update_date,
        a.order_price,a.should_price,a.discount_price,a.cons_price,
        a.pay_type,
        a.create_by,
        u.name as create_user,
        a.checkout_id,
        p.name as projectName
        from reserve_venue_cons as a
        LEFT JOIN  reserve_venue as v ON a.venue_id = v.id
        LEFT JOIN  reserve_user as u on a.create_by = u.id
        left JOIN  reserve_project as p ON a.project_id = p.id
        where a.del_flag = '0' and a.reserve_type = '4' and a.tenant_id = #{tenantId}
        <if test="startDate != null and endDate != null">
            and (Date(a.update_date) BETWEEN DATE (#{startDate}) AND DATE(#{endDate}))
        </if>
        <if test="user!=null and user.id!=null and user.id!=''">
            and a.create_by = #{user.id}
        </if>
        <if test="venue!=null and venue.id!=null and venue.id!=''">
            and a.venue_id = #{venue.id}
        </if>
        ${dsf}
        ORDER BY cons_date DESC
    </select>

    <select id="findTimeCardSaleLog" resultType="java.util.Map">
          select a.venue_id,v.name,
          a.user_name,a.cons_mobile,a.update_date as cons_date,a.update_date,
          a.collect_price as order_price,a.collect_price as should_price,a.collect_price as cons_price,
          a.pay_type,
          a.create_by,
          u.name as create_user,
          p.name as projectName
          from reserve_venue_order a,reserve_venue v,reserve_user u,reserve_venue_visitors_set s, reserve_project p
          where a.venue_id = v.id and a.create_by = u.id and a.visitors_set_id=s.id and s.project_id=p.id
          and a.del_flag = '0' and a.tenant_id = #{tenantId}
          <if test="startDate != null and endDate != null">
              and (Date(a.update_date) BETWEEN DATE (#{startDate}) AND DATE(#{endDate}))
          </if>
          <if test="user!=null and user.id!=null and user.id!=''">
              and a.create_by = #{user.id}
          </if>
          <if test="venue!=null and venue.id!=null and venue.id!=''">
              and a.venue_id = #{venue.id}
          </if>
        ORDER BY order_date DESC
    </select>

    <select id="sellMonthOfChart" resultType="java.math.BigDecimal">
        SELECT sum(c.orderPrice) AS orderPrice from(
        SELECT
        SUM(a.order_price) AS "orderPrice"
        from reserve_venue_cons as a
        WHERE a.del_flag = '0' and a.reserve_type = '4'
        and month(a.update_date)=month(CURDATE()) and a.tenant_id = #{tenantId}
        ${sqlMap.dsf}
        GROUP BY
        date_format(a.update_date, '%Y-%m-%d')
        UNION
        select sum(a.collect_price) as "orderPrice"
        from reserve_venue_order a
        WHERE a.del_flag = '0' and a.tenant_id = #{tenantId}
        and month(a.update_date)=month(CURDATE())
        ${sqlMap.dsf}) c
    </select>


    <select id="sellOfChart" resultType="java.util.Map">
        SELECT sum(c.orderPrice) AS orderPrice,c.updateDate from(
        SELECT
        SUM(a.order_price) AS "orderPrice",date_format(a.update_date,'%Y-%m-%d') AS "updateDate",a.venue_id as venueId
        from reserve_venue_cons as a
        WHERE a.del_flag = '0' and a.reserve_type = '4' and a.tenant_id = #{tenantId}
        <![CDATA[
		and DATE_SUB(CURDATE(), INTERVAL #{sqlMap.day} DAY) <= date(a.update_date)
		]]>
        <if test="reserveVenue!=null and reserveVenue.id!=null and reserveVenue.id!=''">
            and a.venue_id = #{reserveVenue.id}
        </if>
        ${sqlMap.dsf}
        GROUP BY
        date_format(a.update_date, '%Y-%m-%d'),a.venue_id
        UNION
        select sum(a.collect_price) as "orderPrice",date_format(a.update_date,'%Y-%m-%d') AS "updateDate",a.venue_id as
        venueId
        from reserve_venue_order a
        WHERE a.del_flag = '0' and a.tenant_id = #{tenantId}
        <![CDATA[
		and DATE_SUB(CURDATE(), INTERVAL #{sqlMap.day} DAY) <= date(a.update_date)
		]]>
        <if test="reserveVenue!=null and reserveVenue.id!=null and reserveVenue.id!=''">
            and a.venue_id = #{reserveVenue.id}
        </if>
        ${sqlMap.dsf}
        GROUP BY
        date_format(a.update_date, '%Y-%m-%d'),a.venue_id) c group by c.updateDate order by c.updateDate
    </select>

    <select id="findList" resultType="ReserveVenueCons">
        SELECT
        <include refid="reserveVenueConsDataColumns"/>
        FROM reserve_venue_cons as a
        <include refid="reserveVenueConsDataJoins"/>
        <where>
            a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
            <if test="userName != null and userName != ''">
                and a.user_name LIKE concat('%',#{userName},'%')
            </if>
            <if test="reserveType != null and reserveType != ''">
                and a.reserve_type = #{reserveType}
            </if>
            ${sqlMap.dsf}
            <if test="sqlMap.startDate != null and sqlMap.endDate != null">
                and (Date(a.update_date) BETWEEN DATE (#{sqlMap.startDate}) AND DATE(#{sqlMap.endDate}))
            </if>
        </where>
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY a.update_date DESC
            </otherwise>
        </choose>
    </select>

    <!--场地售卖报表-->

    <select id="findAllList" resultType="ReserveVenueCons">
        SELECT
        <include refid="reserveVenueConsDataColumns"/>
        FROM reserve_venue_cons a
        <include refid="reserveVenueConsDataJoins"/>
        <where>
            a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
        </where>
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY a.update_date DESC
            </otherwise>
        </choose>
    </select>

    <insert id="insert">
		INSERT INTO reserve_venue_cons(
			id,
			member_id,
			project_id,
			checkout_id,
			venue_id,
			cons_mobile,
			user_name,
			cons_type,
			reserve_type,
			order_price,
			should_price,
			cons_price,
			discount_price,
			pay_type,
			cons_date,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag,
			tenant_id
		) VALUES (
			#{id},
			#{member.id},
			#{project.id},
			#{checkOutUser.id},
			#{reserveVenue.id},
			#{consMobile},
			#{userName},
			#{consType},
			#{reserveType},
			#{orderPrice},
			#{shouldPrice},
			#{consPrice},
			#{discountPrice},
			#{payType},
			#{consDate},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag},
			#{tenantId}
		)
	</insert>

    <update id="update">
		UPDATE reserve_venue_cons SET
			member_id = #{member.id},
			project_id = #{project.id},
			checkout_id = #{checkOutUser.id},
			venue_id = #{reserveVenue.id},
			cons_mobile = #{consMobile},
			user_name = #{userName},
			cons_type = #{consType},
			reserve_type = #{reserveType},
			order_price = #{orderPrice},
			should_price = #{shouldPrice},
			cons_price = #{consPrice},
			discount_price = #{discountPrice},
			pay_type = #{payType},
			cons_date = #{consDate},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks},
			tenant_id = #{tenantId}
		WHERE id = #{id}
	</update>

    <update id="delete">
		UPDATE reserve_venue_cons SET
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

</mapper>