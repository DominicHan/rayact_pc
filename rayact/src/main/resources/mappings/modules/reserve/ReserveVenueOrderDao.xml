<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bra.modules.reserve.dao.ReserveVenueOrderDao">

    <sql id="reserveVenueOrderColumns">
		a.id AS "id",
		a.venue_id AS "reserveVenue.id",
		v.name AS "reserveVenue.name",
		a.fk_reserve_field_id AS "reserveField.id",
		f.name AS "reserveField.name",
		a.visitors_set_id AS "visitorsSet.id",
		p.name AS "visitorsSet.name",
		a.member_id AS "member.id",
		a.cons_mobile AS "consMobile",
		a.user_name AS "userName",
		a.order_type AS "orderType",
		a.order_date AS "orderDate",
		a.order_price AS "orderPrice",
		a.collect_price AS "collectPrice",
		a.pay_type AS "payType",
		a.collect_count AS "collectCount",
		a.start_time AS "startTime",
		a.end_time AS "endTime",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag"
	</sql>

    <sql id="reserveVenueOrderJoins">
		LEFT JOIN reserve_venue_visitors_set p ON a.visitors_set_id = p.id
		LEFT JOIN reserve_venue v ON a.venue_id = v.id
		LEFT JOIN reserve_field f ON a.fk_reserve_field_id = f.id
	</sql>

    <select id="get" resultType="ReserveVenueOrder">
        SELECT
        <include refid="reserveVenueOrderColumns"/>
        FROM reserve_venue_order a
        <include refid="reserveVenueOrderJoins"/>
        WHERE a.id = #{id}
    </select>

    <!--订单-->
    <select id="findListOrder" resultType="ReserveVenueOrder">
        select a.id AS "id",v.name AS "reserveVenue.name",a.collect_price AS "orderPrice",a.pay_type AS "payType"
        from reserve_venue_order a,reserve_venue v
        where a.venue_id = v.id and a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
        ${sqlMap.dsf}
        <if test="sqlMap.startDate != null and sqlMap.endDate != null">
            and (a.update_date BETWEEN #{sqlMap.startDate} AND #{sqlMap.endDate})
        </if>
        ORDER BY a.update_date DESC
    </select>

    <select id="findList" resultType="ReserveVenueOrder">
        SELECT
        <include refid="reserveVenueOrderColumns"/>
        FROM reserve_venue_order a
        <include refid="reserveVenueOrderJoins"/>
        <where>
            a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
            ${sqlMap.dsf}
            <if test="sqlMap.startDate != null and sqlMap.endDate != null">
                and (a.update_date BETWEEN #{sqlMap.startDate} AND #{sqlMap.endDate})
            </if>
			<if test="orderDate != null">
				and (DATE (a.order_date)= Date(#{orderDate}))
			</if>
			<if test="reserveVenue != null">
				and a.venue_id= #{reserveVenue.id}
			</if>
			<if test="reserveField != null">
				and a.fk_reserve_field_id= #{reserveField.id}
			</if>
			<if test="startTime != null and startTime!='' and endTime != null and endTime!=''">
				and STRCMP(#{startTime},a.start_time)>=0 and STRCMP(a.end_time,#{endTime})>=0
			</if>
        </where>
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY a.update_date DESC
            </otherwise>
        </choose>
    </select>

    <select id="findPriceGroupProject" resultType="java.util.Map">
        SELECT sum(a.collect_price) as orderPrice,c.name as projectName
         FROM reserve_venue_order a,reserve_venue_visitors_set b,reserve_project c
        where a.del_flag = '0' and a.visitors_set_id = b.id and b.project_id = c.id
        and year(a.update_date)=year(CURDATE()) and a.tenant_id = #{tenantId}
        ${sqlMap.dsf}
        group by c.name
	</select>

	<select id="findPriceGroupProjectReport" resultType="java.util.Map">
		SELECT sum(a.collect_price) as orderPrice,c.name as projectName,
        count(pay_Type) as total,
        sum(case pay_Type when '1' then a.collect_price else 0 end) storedCardBill,
        sum(case pay_Type when '2' then a.collect_price else 0 end) cashBill,
        sum(case pay_Type when '3' then a.collect_price else 0 end) bankCardBill,
        sum(case pay_Type when '11' then a.collect_price else 0 end) transferBill,
        sum(case pay_Type when '4' then a.collect_price else 0 end) weiXinBill,
        sum(case pay_Type when '9' then a.collect_price else 0 end) personalWeiXinBill,
        sum(case pay_Type when '5' then a.collect_price else 0 end) aliPayBill,
        sum(case pay_Type when '10' then a.collect_price else 0 end) personalAliPayBill,
        sum(case pay_Type when '6' then a.collect_price else 0 end) otherPrice
		FROM reserve_venue_order a,reserve_venue_visitors_set b,reserve_project c
		where a.del_flag = '0' and a.visitors_set_id = b.id and b.project_id = c.id
        and a.tenant_id = #{tenantId}
		<if test="sqlMap.search != null and sqlMap.search != '' and sqlMap.search = '1' ">
			and date(a.update_date)=date(CURDATE())
		</if>
		<if test="sqlMap.search != null and sqlMap.search != '' and sqlMap.search = '2' ">
			and month(a.update_date)=month(CURDATE())
		</if>
		<if test="sqlMap.search != null and sqlMap.search != '' and sqlMap.search = '3' ">
			and year(a.update_date)=year(CURDATE())
		</if>
		<if test="sqlMap.startDate != null and sqlMap.endDate != null">
			and (a.update_date BETWEEN #{sqlMap.startDate} AND #{sqlMap.endDate})
		</if>
		${sqlMap.dsf}
		group by c.id
	</select>

    <select id="findAllList" resultType="ReserveVenueOrder">
        SELECT
        <include refid="reserveVenueOrderColumns"/>
        FROM reserve_venue_order a
        <include refid="reserveVenueOrderJoins"/>
        <where>
            a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
        </where>
        <choose>
            <when test="page !=null and page.orderBy != null and page.orderBy != ''">
                ORDER BY ${page.orderBy}
            </when>
            <otherwise>
                ORDER BY a.update_date DESC
            </otherwise>
        </choose>
    </select>

    <insert id="insert">
		INSERT INTO reserve_venue_order(
			id,
			venue_id,
			fk_reserve_field_id,
			visitors_set_id,
			member_id,
			cons_mobile,
			user_name,
			order_type,
			order_date,
			order_price,
			collect_price,
			pay_type,
			collect_count,
			start_time,
			end_time,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag,
			tenant_id
		) VALUES (
			#{id},
			#{reserveVenue.id},
			#{reserveField.id},
			#{visitorsSet.id},
			#{member.id},
			#{consMobile},
			#{userName},
			#{orderType},
			#{orderDate},
			#{orderPrice},
			#{collectPrice},
			#{payType},
			#{collectCount},
			#{startTime},
			#{endTime},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag},
			#{tenantId}
		)
	</insert>

    <update id="update">
		UPDATE reserve_venue_order SET 	
			venue_id = #{reserveVenue.id},
			fk_reserve_field_id = #{reserveField.id},
			visitors_set_id = #{visitorsSet.id},
			member_id = #{member.id},
			cons_mobile = #{consMobile},
			user_name = #{userName},
			order_type = #{orderType},
			order_date = #{orderDate},
			order_price = #{orderPrice},
			collect_price = #{collectPrice},
			pay_type = #{payType},
			collect_count = #{collectCount},
			start_time=#{startTime},
			end_time=#{endTime},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks},
			tenant_id = #{tenantId}
		WHERE id = #{id}
	</update>

    <update id="delete">
		UPDATE reserve_venue_order SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

</mapper>