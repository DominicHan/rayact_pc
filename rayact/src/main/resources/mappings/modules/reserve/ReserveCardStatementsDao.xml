<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bra.modules.reserve.dao.ReserveCardStatementsDao">

	<sql id="reserveCardStatementsColumns">
		a.id AS "id",
		a.transaction_type AS "transactionType",
		a.fk_reserve_member_id AS "reserveMember.id",
		a.venue_id AS "venue.id",
		a.transaction_volume AS "transactionVolume",
		a.pay_type AS "payType",
		a.create_by AS "createBy.id",
		u.name AS "createBy.name",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag",
		m.cartno AS "reserveMember.cartno",
		m.name AS "reserveMember.name",
	  	m.mobile AS "reserveMember.mobile"
	</sql>

	<sql id="reserveCardStatementsJoins">
		left JOIN reserve_member as m on m.id=a.fk_reserve_member_id
		LEFT JOIN  reserve_user as u on u.id=a.create_by
		LEFT JOIN  reserve_venue as v on v.id = a.venue_id
	</sql>

	<select id="rechargeOfToday" resultType="BigDecimal">
		select SUM(transaction_volume)
		from reserve_card_statements as a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		and a.transaction_type='1' and datediff(a.update_date,curdate())=0
	</select>

	<select id="rechargeOfMonth" resultType="BigDecimal">
		select SUM(transaction_volume)
		from reserve_card_statements as a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		and Month(a.update_date)=MONTH(CURDATE()) and a.transaction_type='1'
	</select>

	<select id="rechargeOfChart" resultType="java.util.Map">
		SELECT SUM(a.transaction_volume) AS "volume",date_format(a.update_date,'%Y-%m-%d') AS "updateDate"
		from reserve_card_statements a
		<![CDATA[
		where a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		and DATE_SUB(CURDATE(), INTERVAL 10 DAY) <= date(a.update_date)  and a.transaction_type='1'
		]]>
		group by date_format(a.update_date,'%Y-%m-%d');
	</select>

	<select id="get" resultType="ReserveCardStatements">
		SELECT
		<include refid="reserveCardStatementsColumns"/>
		FROM reserve_card_statements a
		<include refid="reserveCardStatementsJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="memberIncomeCollectReport" resultType="ReserveMemberIntervalReport">
		select
		v.id as "reserveVenue.id",
		v.name as "reserveVenue.name",
		SUM(a.transaction_volume) AS "bill",
		sum(if(pay_type=1,a.transaction_volume,0)) AS "storedCardBill",
		sum(if(pay_type=2,a.transaction_volume,0)) AS "cashBill",
		sum(if(pay_type=3,a.transaction_volume,0)) AS "bankCardBill",
		sum(if(pay_type=4,a.transaction_volume,0)) AS "weiXinBill",
		sum(if(pay_type=5,a.transaction_volume,0)) AS "aliPayBill",
		sum(if(pay_type=6,a.transaction_volume,0)) AS "otherBill",
		sum(if(pay_type=7,a.transaction_volume,0)) AS "dueBill"
		from reserve_card_statements as a ,reserve_member as m ,reserve_venue as v
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		  	and a.transaction_type='1' and a.fk_reserve_member_id=m.id
			and v.id= m.fk_reserve_venue_id
			<if test="startDate!=null and endDate !=null">
				and datediff(a.update_date,#{startDate})>=0 and datediff(#{endDate},a.update_date)>=0
			</if>
			<if test="reserveVenue!=null">
					and v.id=#{reserveVenue.id}
			</if>
		</where>
		GROUP BY v.id
	</select>

	<select id="memberIncomeIntervalReport" resultType="ReserveMemberIntervalReport">
		select
		<if test="reserveVenue!=null">
			<if test="reserveVenue.id!=null and reserveVenue.id!=''">
				v.id as 'reserveVenue.id',
				v.name as 'reserveVenue.name',
			</if>
		</if>
		#{startDate} as 'startDate',
		#{endDate} as 'endDate',
		SUM(a.transaction_volume) AS "bill",
		sum(if(pay_type=2,a.transaction_volume,0)) AS "cashBill",
		sum(if(pay_type=3,a.transaction_volume,0)) AS "bankCardBill",
		sum(if(pay_type=4,a.transaction_volume,0)) AS "weiXinBill",
		sum(if(pay_type=5,a.transaction_volume,0)) AS "aliPayBill",
		sum(if(pay_type=6,a.transaction_volume,0)) AS "otherBill",
		sum(if(pay_type=7,a.transaction_volume,0)) AS "dueBill"
		from reserve_card_statements as a ,reserve_member as m ,reserve_venue as v
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
			AND a.transaction_type='1' and a.fk_reserve_member_id=m.id
			and v.id= m.fk_reserve_venue_id
			<if test="reserveVenue!=null">
				<if test="reserveVenue.id!=null and reserveVenue.id!=''">
					AND v.id=#{reserveVenue.id}
				</if>
			</if>
			<if test="startDate!=null and endDate !=null">
				and datediff(a.update_date,#{startDate})>=0 and datediff(#{endDate},a.update_date)>=0
			</if>
		</where>
		<if test="reserveVenue!=null">
			<if test="reserveVenue.id!=null and reserveVenue.id!=''">
				GROUP BY v.id
			</if>
		</if>
	</select>

	<select id="memberIncomeDayReport" resultType="ReserveMemberDayReport">
		select
		v.id as 'reserveVenue.id',
		v.name as 'reserveVenue.name',
		#{day} as 'day',
		SUM(a.transaction_volume) AS "bill",
		sum(if(pay_type=2,a.transaction_volume,0)) AS "cashBill",
		sum(if(pay_type=3,a.transaction_volume,0)) AS "bankCardBill",
		sum(if(pay_type=4,a.transaction_volume,0)) AS "weiXinBill",
		sum(if(pay_type=5,a.transaction_volume,0)) AS "aliPayBill",
		sum(if(pay_type=6,a.transaction_volume,0)) AS "otherBill",
		sum(if(pay_type=7,a.transaction_volume,0)) AS "dueBill"
		from reserve_card_statements as a ,reserve_member as m ,reserve_venue as v
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
			AND a.transaction_type='1' and a.fk_reserve_member_id=m.id
			and v.id= m.fk_reserve_venue_id
			<if test="reserveVenue!=null">
				<if test="reserveVenue.id!=null and reserveVenue.id!=''">
					AND v.id=#{reserveVenue.id}
				</if>
			</if>
			<if test="day!=null">
				and datediff(a.update_date,#{day})=0
			</if>
		</where>
		<if test="reserveVenue!=null">
			<if test="reserveVenue.id!=null and reserveVenue.id!=''">
				GROUP BY v.id
			</if>
		</if>
	</select>

	<select id="findList" resultType="ReserveCardStatements">
		SELECT
		<include refid="reserveCardStatementsColumns"/>
		FROM reserve_card_statements a
		<include refid="reserveCardStatementsJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
			<if test="reserveMember!=null">
				<if test="reserveMember.name !=null and reserveMember.name !=''">
					and ( (m.name like concat('%',#{reserveMember.name},'%')) or (m.cartno like
					concat('%',#{reserveMember.name},'%')) or (m.mobile like concat('%',#{reserveMember.name},'%')) )
				</if>
			</if>
			<if test="transactionType!=null and transactionType!=''">
				and a.transaction_type = #{transactionType}
			</if>

			<if test="startDate!=null and endDate !=null">
				and datediff(a.update_date,#{startDate})>=0 and datediff(#{endDate},a.update_date)>=0
			</if>

		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>

			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findAllList" resultType="ReserveCardStatements">
		SELECT
		<include refid="reserveCardStatementsColumns"/>
		FROM reserve_card_statements a
		<include refid="reserveCardStatementsJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<insert id="insert">
		INSERT INTO reserve_card_statements(
			id,
			fk_reserve_member_id,
			transaction_type,
			transaction_volume,
			pay_type,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag,
			tenant_id,
			venue_id
		) VALUES (
			#{id},
			#{reserveMember.id},
			#{transactionType},
			#{transactionVolume},
			#{payType},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag},
			#{tenantId},
			#{venue.id}
		)
	</insert>

	<update id="update">
		UPDATE reserve_card_statements SET 	
			fk_reserve_member_id = #{reserveMember.id},
			transaction_type = #{transactionType},
			transaction_volume = #{transactionVolume},
			pay_type = #{payType},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks},
			tenant_id = #{tenantId},
			venue_id = #{venue.id}
		WHERE id = #{id}
	</update>

	<update id="delete">
		UPDATE reserve_card_statements SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

	<select id="allReport" resultType="java.util.Map">
		SELECT
			v.id as venue_id,
			v.name as venue_name,
			SUM(case when s.transaction_type = '1' or s.transaction_type = '7' THEN s.transaction_volume ELSE 0 END) AS store_in,
			SUM(case WHEN s.transaction_type = '3' THEN s.transaction_volume ELSE 0 END) AS commodity_in,
		 	SUM(CASE WHEN s.transaction_type = '8' THEN s.transaction_volume ELSE 0 END) AS field_in,
			SUM(CASE WHEN s.pay_type = '1' THEN s.transaction_volume ELSE 0 END) AS store_cost,
		 	SUM(CASE WHEN s.transaction_type = '9' THEN s.transaction_volume ELSE 0 END) AS time_cost
		FROM reserve_venue v
		LEFT JOIN reserve_card_statements s on s.venue_id = v.id
		<if test="startDate!=null and endDate !=null">
		and datediff(s.update_date,#{startDate})>=0 and datediff(#{endDate},s.update_date)>=0
		</if>
		where 1=1
		${sqlMap.dsf}
		GROUP BY v.id
	</select>

</mapper>