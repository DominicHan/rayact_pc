<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bra.modules.reserve.dao.ReserveCardStatementsDao">

	<sql id="reserveCardStatementsColumns">
		a.id AS "id",
		a.transaction_type AS "transactionType",
		a.fk_reserve_member_id AS "reserveMember.id",
		a.venue_id AS "venue.id",
		v.name as "venue.name",
		a.fk_reserve_commodity_id as "reserveCommodity.id",
		commodity.name as "reserveCommodity.name",
		a.transaction_num as "transactionNum",
		a.transaction_volume AS "transactionVolume",
		a.member_remainder AS "reserveMember.remainder",
		a.fk_order_id AS "orderId",
		a.pay_type AS "payType",
		a.create_by AS "createBy.id",
		a.update_by AS "updateBy.id",
		crt.name AS "createBy.name",
		upt.name AS "updateBy.name",
		a.create_date AS "createDate",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag",
		m.card_no AS "reserveMember.cardNo",
		m.name AS "reserveMember.name",
	  	m.mobile AS "reserveMember.mobile"
	</sql>

	<sql id="reserveCardStatementsJoins">
		left JOIN reserve_member as m on m.id=a.fk_reserve_member_id
		left JOIN reserve_commodity as commodity on commodity.id=a.fk_reserve_commodity_id
		LEFT JOIN  reserve_user as crt on crt.id=a.create_by
		LEFT JOIN  reserve_user as upt on upt.id=a.create_by
		LEFT JOIN  reserve_venue as v on v.id = a.venue_id
	    LEFT JOIN reserve_venue_cons as cons on cons.id=a.fk_order_id
	</sql>

	<select id="rechargeOfToday" resultType="BigDecimal">
		select SUM(transaction_volume)
		from reserve_card_statements as a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		and a.transaction_type='1' and datediff(a.update_date,curdate())=0
	</select>

	<select id="rechargeOfMonth" resultType="BigDecimal">
		select SUM(transaction_volume)
		from reserve_card_statements as a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		and Month(a.update_date)=MONTH(CURDATE()) and a.transaction_type='1'
	</select>

	<select id="rechargeOfChart" resultType="java.util.Map">
		SELECT SUM(a.transaction_volume) AS "volume",date_format(a.update_date,'%Y-%m-%d') AS "updateDate"
		from reserve_card_statements a
		<![CDATA[
		where a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		and DATE_SUB(CURDATE(), INTERVAL 10 DAY) <= date(a.update_date)  and a.transaction_type='1'
		]]>
		group by date_format(a.update_date,'%Y-%m-%d');
	</select>

	<select id="get" resultType="ReserveCardStatements">
		SELECT
		<include refid="reserveCardStatementsColumns"/>
		FROM reserve_card_statements a
		<include refid="reserveCardStatementsJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="memberIncomeCollectReport" resultType="ReserveMemberIntervalReport">
		select
		v.id as "reserveVenue.id",
		v.name as "reserveVenue.name",
		SUM(a.transaction_volume) AS "bill",
		sum(if(pay_type=1,a.transaction_volume,0)) AS "storedCardBill",
		sum(if(pay_type=2,a.transaction_volume,0)) AS "cashBill",
		sum(if(pay_type=3,a.transaction_volume,0)) AS "bankCardBill",
		sum(if(pay_type=11,a.transaction_volume,0)) AS "transferBill",
		sum(if(pay_type=4,a.transaction_volume,0)) AS "weiXinBill",
		sum(if(pay_type=9,a.transaction_volume,0)) AS "personalWeiXinBill",
		sum(if(pay_type=5,a.transaction_volume,0)) AS "aliPayBill",
		sum(if(pay_type=10,a.transaction_volume,0)) AS "personalAliPayBill",
		sum(if(pay_type=6,a.transaction_volume,0)) AS "otherBill",
		sum(if(pay_type=7,a.transaction_volume,0)) AS "dueBill"
		from reserve_card_statements as a ,reserve_member as m ,reserve_venue as v
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		  	and (a.transaction_type='1' or a.transaction_type='7') and a.fk_reserve_member_id=m.id
			and v.id= m.fk_reserve_venue_id
			<if test="startDate!=null and endDate !=null">
				and datediff(a.update_date,#{startDate})>=0 and datediff(#{endDate},a.update_date)>=0
			</if>
			<if test="reserveVenue!=null">
					and v.id=#{reserveVenue.id}
			</if>
			${sqlMap.dsf}
		</where>
		GROUP BY v.id
	</select>

	<select id="memberIncomeDayReport" resultType="ReserveMemberDayReport">
		select
		v.id as 'reserveVenue.id',
		v.name as 'reserveVenue.name',
		#{day} as 'day',
		SUM(a.transaction_volume) AS "bill",
		sum(if(pay_type=2,a.transaction_volume,0)) AS "cashBill",
		sum(if(pay_type=3,a.transaction_volume,0)) AS "bankCardBill",
		sum(if(pay_type=11,a.transaction_volume,0)) AS "transferBill",
		sum(if(pay_type=4,a.transaction_volume,0)) AS "weiXinBill",
		sum(if(pay_type=9,a.transaction_volume,0)) AS "personalWeiXinBill",
		sum(if(pay_type=5,a.transaction_volume,0)) AS "aliPayBill",
		sum(if(pay_type=10,a.transaction_volume,0)) AS "personalAliPayBill",
		sum(if(pay_type=6,a.transaction_volume,0)) AS "otherBill",
		sum(if(pay_type=7,a.transaction_volume,0)) AS "dueBill"
		from reserve_card_statements as a ,reserve_member as m ,reserve_venue as v
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
			AND a.transaction_type='1' and a.fk_reserve_member_id=m.id
			and v.id= m.fk_reserve_venue_id
			<if test="reserveVenue!=null">
				<if test="reserveVenue.id!=null and reserveVenue.id!=''">
					AND v.id=#{reserveVenue.id}
				</if>
			</if>
			<if test="day!=null">
				and datediff(a.update_date,#{day})=0
			</if>
			${sqlMap.dsf}
		</where>
		<if test="reserveVenue!=null">
			<if test="reserveVenue.id!=null and reserveVenue.id!=''">
				GROUP BY v.id
			</if>
		</if>
	</select>

	<select id="memberIncomeIntervalReport" resultType="ReserveMemberIntervalReport">
		select
		<if test="reserveVenue!=null">
			<if test="reserveVenue.id!=null and reserveVenue.id!=''">
				v.id as 'reserveVenue.id',
				v.name as 'reserveVenue.name',
			</if>
		</if>
		#{startDate} as 'startDate',
		#{endDate} as 'endDate',
		SUM(a.transaction_volume) AS "bill",
		sum(if(pay_type=2,a.transaction_volume,0)) AS "cashBill",
		sum(if(pay_type=3,a.transaction_volume,0)) AS "bankCardBill",
		sum(if(pay_type=11,a.transaction_volume,0)) AS "transferBill",
		sum(if(pay_type=4,a.transaction_volume,0)) AS "weiXinBill",
		sum(if(pay_type=9,a.transaction_volume,0)) AS "personalWeiXinBill",
		sum(if(pay_type=5,a.transaction_volume,0)) AS "aliPayBill",
		sum(if(pay_type=10,a.transaction_volume,0)) AS "personalAliPayBill",
		sum(if(pay_type=6,a.transaction_volume,0)) AS "otherBill",
		sum(if(pay_type=7,a.transaction_volume,0)) AS "dueBill"
		from reserve_card_statements as a ,reserve_member as m ,reserve_venue as v
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
			AND a.transaction_type='1' and a.fk_reserve_member_id=m.id
			and v.id= m.fk_reserve_venue_id
			<if test="reserveVenue!=null">
				<if test="reserveVenue.id!=null and reserveVenue.id!=''">
					AND v.id=#{reserveVenue.id}
				</if>
			</if>
			<if test="startDate!=null and endDate !=null">
				and datediff(a.update_date,#{startDate})>=0 and datediff(#{endDate},a.update_date)>=0
			</if>
			${sqlMap.dsf}
		</where>
		<if test="reserveVenue!=null">
			<if test="reserveVenue.id!=null and reserveVenue.id!=''">
				GROUP BY v.id
			</if>
		</if>
	</select>



	<select id="findList" resultType="ReserveCardStatements">
		SELECT
		<include refid="reserveCardStatementsColumns"/>
		FROM reserve_card_statements a
		<include refid="reserveCardStatementsJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="tenantId != null and tenantId != ''">
				and a.tenant_id = #{tenantId}
			</if>
			<if test="reserveMember!=null">
				<if test="reserveMember.id !=null and reserveMember.id !=''">
					and a.fk_reserve_member_id=#{reserveMember.id}
				</if>
				<if test="reserveMember.name !=null and reserveMember.name !=''">
					and ( (m.name like concat('%',#{reserveMember.name},'%')) or (m.cartno like
					concat('%',#{reserveMember.name},'%')) or (m.mobile like concat('%',#{reserveMember.name},'%')) )
				</if>
			</if>
			<if test="orderId!=null and orderId !=''">
				  and a.fk_order_id=#{orderId}
			</if>
			<if test="venue!=null and venue.id!=null and venue.id!=''">
				and a.venue_id = #{venue.id}
			</if>
			<if test="transactionType!=null and transactionType!=''">
				and a.transaction_type = #{transactionType}
			</if>
			<if test="startDate!=null and endDate !=null">
				and datediff(a.update_date,#{startDate})>=0 and datediff(#{endDate},a.update_date)>=0
			</if>

		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>

			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findPersonalStatements" resultType="ReserveCardStatements">
		SELECT
		<include refid="reserveCardStatementsColumns"/>
		FROM reserve_card_statements a
		<include refid="reserveCardStatementsJoins"/>
		<where>
			and a.tenant_id = #{tenantId} AND transaction_type !='3'
			<if test="reserveMember!=null">
				<if test="reserveMember.id !=null and reserveMember.id !=''">
					and a.fk_reserve_member_id=#{reserveMember.id}
				</if>
			</if>
			<if test="startDate!=null and endDate !=null">
				and datediff(a.update_date,#{startDate})>=0 and datediff(#{endDate},a.update_date)>=0
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findAllList" resultType="ReserveCardStatements">
		SELECT
		<include refid="reserveCardStatementsColumns"/>
		FROM reserve_card_statements a
		<include refid="reserveCardStatementsJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} and a.tenant_id = #{tenantId}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<insert id="insert">
		INSERT INTO reserve_card_statements(
			id,
			fk_reserve_member_id,
			fk_reserve_commodity_id,
			transaction_type,
			transaction_num,
			transaction_volume,
			member_remainder,
			fk_order_id,
			pay_type,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag,
			tenant_id,
			venue_id
		) VALUES (
			#{id},
			#{reserveMember.id},
			#{reserveCommodity.id},
			#{transactionType},
			#{transactionNum},
			#{transactionVolume},
			#{reserveMember.remainder},
			#{orderId},
			#{payType},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag},
			#{tenantId},
			#{venue.id}
		)
	</insert>

	<update id="update">
		UPDATE reserve_card_statements SET 	
			fk_reserve_member_id = #{reserveMember.id},
			transaction_type = #{transactionType},
			transaction_volume = #{transactionVolume},
			fk_order_id=#{orderId},
			pay_type = #{payType},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks},
			tenant_id = #{tenantId},
			venue_id = #{venue.id}
		WHERE id = #{id}
	</update>

	<update id="delete">
		UPDATE reserve_card_statements SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	<!--高管在手机端查看的总收入 PC 场馆收益统计-->
	<select id="venueIncomeReport" resultType="java.util.Map">
		SELECT
		v.id as venue_id,
		v.name as venue_name,
		SUM(case when s.transaction_type = '1' or s.transaction_type = '7' THEN s.transaction_volume ELSE 0 END) AS store_in,
		SUM(case WHEN s.transaction_type = '3' THEN s.transaction_volume ELSE 0 END) AS commodity_in,
		SUM(CASE WHEN s.transaction_type = '8' or s.transaction_type = '9' THEN s.transaction_volume ELSE 0 END) AS field_in,
		SUM(CASE WHEN s.transaction_type = '6' THEN s.transaction_volume ELSE 0 END) AS break_in,
		SUM(CASE WHEN s.transaction_type = '3' or s.transaction_type = '6' or s.transaction_type = '8' or s.transaction_type = '9' THEN s.transaction_volume ELSE 0 END) AS all_in,
		SUM(CASE WHEN s.pay_type = '1' THEN s.transaction_volume ELSE 0 END) AS store_cost,
		SUM(CASE WHEN s.transaction_type = '9' THEN s.transaction_volume ELSE 0 END) AS time_cost
		FROM reserve_venue v
		LEFT JOIN reserve_card_statements s on s.venue_id = v.id
		<if test="startDate!=null and endDate !=null">
			and datediff(s.create_date,#{startDate})>=0 and datediff(#{endDate},s.create_date)>=0
		</if>
		where 1=1 and v.tenant_id = #{tenantId} and s.del_flag = #{DEL_FLAG_NORMAL}
		${sqlMap.dsf}
		GROUP BY v.id
	</select>
	<select id="fieldIncome" resultType="java.util.Map" parameterType="SearchForm">
		SELECT
		f.name AS field_name,
		SUM(CASE WHEN half_court = '0' THEN price ELSE 0 END) AS fullprice,
		SUM(CASE WHEN half_court = '1' THEN price ELSE 0 END) AS halfprice,
		SUM(CASE WHEN half_court = '0' THEN num ELSE 0 END) AS fullnum,
		SUM(CASE WHEN half_court = '1' THEN num ELSE 0 END) AS halfnum
		FROM
		(SELECT f.* FROM reserve_field f LEFT JOIN reserve_field_relation r ON f.id = r.child_field_id WHERE r.parent_field_id is null AND f.del_flag = #{DEL_FLAG_NORMAL}) f
		LEFT JOIN
		(
			SELECT
			SUM(i.cons_price) AS price,
			COUNT(i.field_id) AS num,
			i.field_id,
			i.half_court
			FROM reserve_venue_cons_item i LEFT JOIN reserve_venue_cons c ON i.cons_data_id = c.id
			WHERE i.half_court = '0' AND i.del_flag = #{DEL_FLAG_NORMAL} AND c.reserve_type = '4'
		    <if test="startDate!=null and endDate !=null">
				and datediff(i.cons_date,#{startDate})>=0 and datediff(#{endDate},i.cons_date)>=0
			</if>
			GROUP BY i.field_id
			UNION
			SELECT
			SUM(i.cons_price),
			COUNT(i.field_id) AS num,
			r.parent_field_id,
			i.half_court
			FROM reserve_venue_cons_item i LEFT JOIN reserve_field_relation r ON i.field_id = r.child_field_id
		    LEFT JOIN reserve_venue_cons c ON i.cons_data_id = c.id
			WHERE i.half_court = '1' AND i.del_flag = #{DEL_FLAG_NORMAL} AND c.reserve_type = '4'
			<if test="startDate!=null and endDate !=null">
				and datediff(i.cons_date,#{startDate})>=0 and datediff(#{endDate},i.cons_date)>=0
			</if>
			GROUP BY r.parent_field_id
		) tmp ON f.id = tmp.field_id WHERE f.venue_id = #{venueId} GROUP BY f.id ORDER BY field_name
	</select>
	<!--APP高管查看商品收入-->
	<select id="storeIncome" resultType="java.util.Map" parameterType="SearchForm">
		SELECT m.name,s.transaction_volume,s.pay_type,date_format(s.create_date,'%Y-%c-%d %h:%i:%s') as storeTime
		FROM reserve_card_statements s
		LEFT JOIN reserve_member m ON s.fk_reserve_member_id = m.id
		WHERE (s.transaction_type = '7' or s.transaction_type = '1')
		<if test="startDate!=null and endDate !=null">
			and datediff(s.update_date,#{startDate})>=0 and datediff(#{endDate},s.update_date)>=0
		</if>
		and s.venue_id = #{venueId}
	</select>

	<!--APP高管查看某件商品的收入-->
	<select id="commIncome" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT
		v.name,
		sum(CASE WHEN cd.num IS NOT NULL THEN cd.num ELSE 0 END ) as num,
		SUM(CASE WHEN cd.detail_sum IS NOT NULL THEN cd.detail_sum ELSE 0 END ) as income
		FROM reserve_venue v
		LEFT JOIN reserve_commodity c ON c.fk_reserve_venue_id = v.id AND c.name = #{commName}
		LEFT JOIN reserve_commodity_sell_detail cd ON c.id = cd.fk_reserve_commodity_id
		WHERE 1=1 and c.del_flag = '0' and cd.del_flag='0'
		<if test="startDate!=null and endDate !=null">
			and datediff(cd.update_date,#{startDate})>=0 and datediff(#{endDate},cd.update_date)>=0
		</if>
		GROUP BY v.id
	</select>
	<!--APP高管查询已售卖的商品列表-->
	<select id="commSell" resultType="ReserveCommodity" parameterType="SearchForm">
		SELECT c.*
		FROM reserve_commodity as c
		LEFT JOIN reserve_commodity_sell_detail cd ON (c.id = cd.fk_reserve_commodity_id and cd.del_flag = '0')
		LEFT JOIN reserve_venue as v ON (v.id=c.fk_reserve_venue_id and v.del_flag='0')
		WHERE 1=1 and  c.tenant_id = #{tenantId}
		<if test="startDate!=null and endDate !=null">
			and datediff(cd.update_date,#{startDate})>=0 and datediff(#{endDate},cd.update_date)>=0
		</if>
		${sqlMap.dsf}
		GROUP BY c.name
	</select>

	<select id="ticketIncome" resultType="java.util.Map" parameterType="SearchForm">
		SELECT v.name,SUM(c.transaction_volume) AS price
		FROM reserve_venue v
		LEFT JOIN reserve_card_statements c ON v.id = c.venue_id
		WHERE c.transaction_type = '9' AND c.del_flag = #{DEL_FLAG_NORMAL} AND v.del_flag = #{DEL_FLAG_NORMAL}
		<if test="startDate!=null and endDate !=null">
			AND  datediff(c.update_date,#{startDate})>=0 and datediff(#{endDate},c.update_date)>=0
		</if>
		<if test="venueId!=null and venueId != ''">
			AND v.id = #{venueId}
		</if>
		GROUP BY v.id
	</select>
</mapper>