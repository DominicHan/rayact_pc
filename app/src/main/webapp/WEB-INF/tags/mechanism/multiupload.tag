<%@ tag import="java.util.List" %><%@ tag import="java.util.ArrayList" %><%@ tag import="com.bra.modules.mechanism.entity.AttMain" %><%@ tag import="com.bra.common.utils.StringUtils" %><%@ tag import="com.bra.modules.mechanism.service.AttMainService" %><%@ tag import="com.bra.common.utils.SpringContextHolder" %><%@ tag language="java" pageEncoding="UTF-8" %><%@ attribute name="id" type="java.lang.String" required="true" description="上传标签id" %><%@ attribute name="exts" type="java.lang.String" required="true" description="允许上传文件的格式,格式：.txt,.rpm" %><%@ attribute name="modelId" type="java.lang.String" required="true" description="modelId" %><%@ attribute name="callBack" type="java.lang.String" required="false" description="回调函数" %><%@ attribute name="modelName" type="java.lang.String" required="true" description="modelName" %><%@ attribute name="multi" type="java.lang.String" required="true" description="是否是多附件" %><%@ taglib prefix="j" uri="/WEB-INF/tlds/jodd.tld" %><j:set name="ctx" value="${pageContext.request.contextPath}"/><%    List<AttMain> attMains = new ArrayList<AttMain>();    if (StringUtils.isNotBlank(modelId) && StringUtils.isNotBlank(modelName)) {        AttMainService attMainService = SpringContextHolder.getBean("attMainService");        attMains = attMainService.getAttMain(modelId, modelName);    }%><%    String ext = "";    if (StringUtils.isNotBlank(exts)) {        String[] extArray = exts.split(",");        StringBuilder sb = new StringBuilder();        for (String string : extArray) {            sb.append("\"").append(string).append("\",");        }        ext = sb.toString();        ext = ext.substring(0, ext.length() - 1);    }%><div id="i_select_files${id }"></div><div id="i_stream_files_queue${id }">    <li class="stream-cell-file">        <%if (attMains.size() > 0) {%>        <b class="stream-uploading-ico"></b>        <%}%>        <%            int index = 0;        %>        <%for (AttMain attMain : attMains) {%>        <div class="stream-file-name"><strong><%=attMain.getFdFileName()%>        </strong></div>        <div class="stream-process">            <a class="stream-cancel" id="<%=attMain.getId()%>" href="javascript:deleteAttMain('<%=attMain.getId()%>')">删除</a>        </div>        <input type="hidden" name="attMains['<%=index%> '].id" value="<%=attMain.getId()%>"/>        <%index++;%>        <%}%>    </li></div><div id="inputHidden${id }" style="visibility: hidden"></div><script type="text/javascript">    function deleteAttMain(id) {        $.ajax({            type: "POST",            cache: false,            url: "${ctx}/mechanism/file/delete/" + id,            async: false,            success: function (result) {                $("#div" + id).remove();            }, error: function () {            }        });    }    var indexx${id } = <%=attMains.size()%>;    var config${id } = {        swfURL: "${ctx }/static/stream/swf/FlashUploader.swf", /** SWF文件的位置 */        tokenURL: "${ctx}/mechanism/token/file", /** 根据文件名、大小等信息获取Token的URI（用于生成断点续传、跨域的令牌） */        frmUploadURL: "${ctx}/mechanism/file/o_upload;", /** Flash上传的URI */        uploadURL: "${ctx}/mechanism/html5/upload", /** HTML5上传的URI */        browseFileId: "i_select_files${id }", /** 选择文件的ID, 默认: i_select_files */        browseFileBtn: "<div>点击上传</div>", /** 显示选择文件的样式, 默认: `<div>请选择文件</div>` */        dragAndDropArea: "i_select_files${id }", /** 拖拽上传区域，Id（字符类型"i_select_files"）或者DOM对象, 默认: `i_select_files` */        filesQueueId: "i_stream_files_queue${id }", /** 文件上传容器的ID, 默认: i_stream_files_queue */        filesQueueHeight: 200, /** 文件上传容器的高度（px）, 默认: 450 */        multipleFiles: ${multi}, /** 多个文件一起上传, 默认: true */        extFilters: [<%=ext%>], /** 允许的文件扩展名, 默认: [] */        onMaxSizeExceed: function (size, limited, name) {            alert('文件大小超过限制');        }, /** 文件大小超出的响应事件 */        onFileCountExceed: function (selected, limit) {            alert('文件数量超过限制');        }, /** 文件数量超出的响应事件 */        onExtNameMismatch: function (name, filters) {            alert('文件扩展名不符合要求');        }, /** 文件的扩展名不匹配的响应事件 */        onComplete: function (file) {            try {                var value = JSON.parse(file.msg);                if (value) {                    <j:if test="${callBack!=null }">                    if (${callBack}) {                        ${callBack}(value.attId, value.fileName);                    }                    </j:if>                    jQuery("#inputHidden${id }").append('<div id="div' + value.attId + '"><input type="text"  name="attMains['                    + indexx${id } + '].fdFileName" value="' + value.fileName + '" /><input type="text"  name="attMains['                    + indexx${id } + '].id" value="' + value.attId + '" /></div>');                    indexx${id}++;                } else {                    alert('上传失败');                }            } catch (e) {                alert(e.message);            }        }        ,        onQueueComplete: function (msg) {        }, /** 所以文件上传完毕的响应事件 */        onUploadError: function (status, msg) {            alert('上传失败');        } /** 文件上传出错的响应事件 */    }    var _t${id} = new Stream(config${id });</script>